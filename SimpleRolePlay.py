#                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
#                ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà
#                ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà
#                ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà
#                ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚ñà
#                ‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà‚îÄ‚ñà‚îÄ‚ñà‚ñà‚îÄ‚îÄ‚îÄ‚îÄ‚ñà
#                ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà
#
#
#                     Copyright 2022 t.me/Dorotoro
#             https://www.gnu.org/licenses/agpl-3.0.html
#
# meta banner: https://raw.githubusercontent.com/dorotorothequickend/DorotoroModules/main/banners/Dor%D0%BEtoroSimpleRoleplay.png
# meta developer: @DorotoroMods

from .. import loader, utils
import random

@loader.tds
class SimpleRolePlay(loader.Module):
    """–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ä–æ–ª–µ–≤—ã—Ö –∏–≥—Ä."""

    strings = {
        "name": "Simple RolePlay",
        "symbol": "–°–∏–º–≤–æ–ª –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –∏ –≤ –Ω–∞—á–∞–ª–µ /me. (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–≤–µ–∑–¥–∞)",
        "not_args": "<emoji document_id=6325733670132909953>üò∞</emoji> <b>–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–ø–∏—Å–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∂–µ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –µ–≥–æ –≤–æ–≤—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "symbol",
                None,
                doc=lambda: self.strings("symbol")
            ),
        )


    @loader.command()
    async def me(self, message):
        "<–¥–µ–π—Å—Ç–≤–∏–µ> - —Å–æ–æ–±—â–∞–µ—Ç –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: .me –æ—Ç–∫—Ä—ã–ª –±—Ä–∞—É–∑–µ—Ä. –¢–∞–∫–∂–µ –µ—Å—Ç—å –¥–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ .config"
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings("not_args"))
        
        me = self.client.hikka_me
        nickname = f'{me.first_name} {me.last_name if me.last_name else ""}'

        cfg = self.config["symbol"]
        
        if cfg:
            await utils.answer(message, f"<emoji document_id=5785175271011259591>üåÄ</emoji> <b>{cfg}{nickname}</b> <i>{args}</i><b>{cfg}</b>")
        else:
            await utils.answer(message, f"<emoji document_id=5785175271011259591>üåÄ</emoji> <b>{nickname}</b> <i>{args}</i><b>")
    
    @loader.command()
    async def do(self, message):
        "<–¥–µ–π—Å—Ç–≤–∏–µ> - –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ª—é–¥—è–º. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: .do –í –∫–∞—Ä–º–∞–Ω–µ –î–æ—Ä–æ—Ç–æ—Ä–æ –ª–µ–∂–∏—Ç –ø–∏—Å—Ç–æ–ª–µ—Ç –∏ –ø–∞—Ä–∞ –≥—Ä–∞–Ω–∞—Ç."
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("not_args"))

        me = self.client.hikka_me
        nickname = f'{me.first_name} {me.last_name if me.last_name else ""}'

        await utils.answer(message, f"<emoji document_id=5785175271011259591>üåÄ</emoji> <i>{args}</i> - | <b>{nickname}</b>")

    @loader.command()
    async def otry(self, message):
        "<–¥–µ–π—Å—Ç–≤–∏–µ> -  –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω—ã—Ö –∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π, –≥–¥–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º, –ª–∏–±–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É–¥–∞—á–∏ —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: .try –∑–∞–≤—ë–ª –º–∞—à–∏–Ω—É."
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("not_args"))

        me = self.client.hikka_me
        nickname = f'{me.first_name} {me.last_name if me.last_name else ""}'

        tryr = random.choice([
            "<b><emoji document_id=6334758581832779720>‚úÖ</emoji> –£–¥–∞—á–Ω–æ </b>", 
            "<b><emoji document_id=6334578700012488415>‚ùå</emoji> –ù–µ—É–¥–∞—á–Ω–æ </b>"
        ])
        
        await utils.answer(message, f"<emoji document_id=5785175271011259591>üåÄ</emoji> <b>{nickname}</b> <i>{args}</i> - | {tryr}")
    
    @loader.command()
    async def todo(self, message):
        "<–¥–µ–π—Å—Ç–≤–∏–µ> <—Ñ—Ä–∞–∑–∞>- —Å–æ–≤–º–µ—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç 3–≥–æ –ª–∏—Ü–∞ (—Å–º. –æ–ø–∏—Å–∞–Ω–∏–µ .do) —Å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑–æ–π —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: .todo –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏. –∑–∞—Å—ã–ø–∞—è"
        args = utils.get_args(message)
        if not args:
            await utils.answer(message, self.strings("not_args"))
        arg1, arg2 = args[0], " ".join(args[1:])
        
        me = self.client.hikka_me
        nickname = f'{me.first_name} {me.last_name if me.last_name else ""}'
        
        await utils.answer(message, f"<emoji document_id=5785175271011259591>üåÄ</emoji> <i>'{arg1}', - —Å–∫–∞–∑–∞–ª </i><b>{nickname}</b>, <i>{arg2}.</i>")
    
